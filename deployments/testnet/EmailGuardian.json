{
  "address": "0xBf081D23317966eEBD59Bc8EDB593A830F373178",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "contract IDkimVerifier",
          "name": "dkimVerifier",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "signer",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "bytes32",
          "name": "email",
          "type": "bytes32"
        }
      ],
      "name": "EmailBinded",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "bytes32",
          "name": "email",
          "type": "bytes32"
        }
      ],
      "name": "EmailUnbinded",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "signer",
          "type": "address"
        }
      ],
      "name": "SignerChanged",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "email",
          "type": "bytes32"
        },
        {
          "internalType": "bytes",
          "name": "signature",
          "type": "bytes"
        }
      ],
      "name": "bind",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "signer",
          "type": "address"
        }
      ],
      "name": "changeSigner",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "emails",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "internalType": "bytes32",
          "name": "email",
          "type": "bytes32"
        }
      ],
      "name": "getHash",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "nonces",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "name": "nullifierHashes",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "typ",
          "type": "string"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "internalType": "bytes",
          "name": "pubkey",
          "type": "bytes"
        }
      ],
      "name": "subjectHex",
      "outputs": [
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "unbind",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "email",
          "type": "bytes32"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "server",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "internalType": "bytes",
          "name": "data",
          "type": "bytes"
        },
        {
          "internalType": "bytes",
          "name": "signature",
          "type": "bytes"
        },
        {
          "internalType": "bytes",
          "name": "pubkey",
          "type": "bytes"
        }
      ],
      "name": "verify",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "verifyingSigner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0xb3272a57b8f0eedd2af8d6d4cb8937c0bc6702adbb827983fab6199fd29516c2",
  "receipt": {
    "to": null,
    "from": "0x7c029553644F5E9442cb576c1056e0f7663Db1Fa",
    "contractAddress": "0xBf081D23317966eEBD59Bc8EDB593A830F373178",
    "transactionIndex": 0,
    "gasUsed": "2327466",
    "logsBloom": "0x00000000000000000001000000000000000000000000000000000000000000000000000000000000002000000000000000000000000000000000000000001000000000000000008000040000000000000000000008000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000040000000000000000000000000000000000000000000000000010400000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000004000200000000000000000000000000000000000000",
    "blockHash": "0x45c46638605d2331d144afd33230cf5837a2c302afc11ca85ef34bc898231fa5",
    "transactionHash": "0xb3272a57b8f0eedd2af8d6d4cb8937c0bc6702adbb827983fab6199fd29516c2",
    "logs": [
      {
        "transactionIndex": 0,
        "blockNumber": 22383389,
        "transactionHash": "0xb3272a57b8f0eedd2af8d6d4cb8937c0bc6702adbb827983fab6199fd29516c2",
        "address": "0xBf081D23317966eEBD59Bc8EDB593A830F373178",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x0000000000000000000000007c029553644f5e9442cb576c1056e0f7663db1fa"
        ],
        "data": "0x",
        "logIndex": 0,
        "blockHash": "0x45c46638605d2331d144afd33230cf5837a2c302afc11ca85ef34bc898231fa5"
      },
      {
        "transactionIndex": 0,
        "blockNumber": 22383389,
        "transactionHash": "0xb3272a57b8f0eedd2af8d6d4cb8937c0bc6702adbb827983fab6199fd29516c2",
        "address": "0xBf081D23317966eEBD59Bc8EDB593A830F373178",
        "topics": [
          "0x5719a5656c5cfdaafa148ecf366fd3b0a7fae06449ce2a46225977fb7417e29d",
          "0x0000000000000000000000007c029553644f5e9442cb576c1056e0f7663db1fa"
        ],
        "data": "0x",
        "logIndex": 1,
        "blockHash": "0x45c46638605d2331d144afd33230cf5837a2c302afc11ca85ef34bc898231fa5"
      }
    ],
    "blockNumber": 22383389,
    "cumulativeGasUsed": "2327466",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0xC04a118DA862fB00a4E3F6eBa725b29AF58efc43",
    "0x7c029553644F5E9442cb576c1056e0f7663Db1Fa"
  ],
  "numDeployments": 3,
  "solcInputHash": "6381165db0de145de02862d3b6caa93d",
  "metadata": "{\"compiler\":{\"version\":\"0.8.19+commit.7dd6d404\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"contract IDkimVerifier\",\"name\":\"dkimVerifier\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"signer\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"email\",\"type\":\"bytes32\"}],\"name\":\"EmailBinded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"email\",\"type\":\"bytes32\"}],\"name\":\"EmailUnbinded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"signer\",\"type\":\"address\"}],\"name\":\"SignerChanged\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"email\",\"type\":\"bytes32\"},{\"internalType\":\"bytes\",\"name\":\"signature\",\"type\":\"bytes\"}],\"name\":\"bind\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"signer\",\"type\":\"address\"}],\"name\":\"changeSigner\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"emails\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"email\",\"type\":\"bytes32\"}],\"name\":\"getHash\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"nonces\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"nullifierHashes\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"typ\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"pubkey\",\"type\":\"bytes\"}],\"name\":\"subjectHex\",\"outputs\":[{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"unbind\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"email\",\"type\":\"bytes32\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"server\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"signature\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"pubkey\",\"type\":\"bytes\"}],\"name\":\"verify\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"verifyingSigner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/accounts/guardian/EmailGuardian.sol\":\"EmailGuardian\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":1000000},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby disabling any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0xba43b97fba0d32eb4254f6a5a297b39a19a247082a02d6e69349e071e2946218\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Strings.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./math/Math.sol\\\";\\nimport \\\"./math/SignedMath.sol\\\";\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant _SYMBOLS = \\\"0123456789abcdef\\\";\\n    uint8 private constant _ADDRESS_LENGTH = 20;\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            uint256 length = Math.log10(value) + 1;\\n            string memory buffer = new string(length);\\n            uint256 ptr;\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                ptr := add(buffer, add(32, length))\\n            }\\n            while (true) {\\n                ptr--;\\n                /// @solidity memory-safe-assembly\\n                assembly {\\n                    mstore8(ptr, byte(mod(value, 10), _SYMBOLS))\\n                }\\n                value /= 10;\\n                if (value == 0) break;\\n            }\\n            return buffer;\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `int256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(int256 value) internal pure returns (string memory) {\\n        return string(abi.encodePacked(value < 0 ? \\\"-\\\" : \\\"\\\", toString(SignedMath.abs(value))));\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            return toHexString(value, Math.log256(value) + 1);\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(address addr) internal pure returns (string memory) {\\n        return toHexString(uint256(uint160(addr)), _ADDRESS_LENGTH);\\n    }\\n\\n    /**\\n     * @dev Returns true if the two strings are equal.\\n     */\\n    function equal(string memory a, string memory b) internal pure returns (bool) {\\n        return keccak256(bytes(a)) == keccak256(bytes(b));\\n    }\\n}\\n\",\"keccak256\":\"0x3088eb2868e8d13d89d16670b5f8612c4ab9ff8956272837d8e90106c59c14a0\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/cryptography/ECDSA.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/cryptography/ECDSA.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../Strings.sol\\\";\\n\\n/**\\n * @dev Elliptic Curve Digital Signature Algorithm (ECDSA) operations.\\n *\\n * These functions can be used to verify that a message was signed by the holder\\n * of the private keys of a given address.\\n */\\nlibrary ECDSA {\\n    enum RecoverError {\\n        NoError,\\n        InvalidSignature,\\n        InvalidSignatureLength,\\n        InvalidSignatureS,\\n        InvalidSignatureV // Deprecated in v4.8\\n    }\\n\\n    function _throwError(RecoverError error) private pure {\\n        if (error == RecoverError.NoError) {\\n            return; // no error: do nothing\\n        } else if (error == RecoverError.InvalidSignature) {\\n            revert(\\\"ECDSA: invalid signature\\\");\\n        } else if (error == RecoverError.InvalidSignatureLength) {\\n            revert(\\\"ECDSA: invalid signature length\\\");\\n        } else if (error == RecoverError.InvalidSignatureS) {\\n            revert(\\\"ECDSA: invalid signature 's' value\\\");\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the address that signed a hashed message (`hash`) with\\n     * `signature` or error string. This address can then be used for verification purposes.\\n     *\\n     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\\n     * this function rejects them by requiring the `s` value to be in the lower\\n     * half order, and the `v` value to be either 27 or 28.\\n     *\\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\\n     * verification to be secure: it is possible to craft signatures that\\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\\n     * this is by receiving a hash of the original message (which may otherwise\\n     * be too long), and then calling {toEthSignedMessageHash} on it.\\n     *\\n     * Documentation for signature generation:\\n     * - with https://web3js.readthedocs.io/en/v1.3.4/web3-eth-accounts.html#sign[Web3.js]\\n     * - with https://docs.ethers.io/v5/api/signer/#Signer-signMessage[ethers]\\n     *\\n     * _Available since v4.3._\\n     */\\n    function tryRecover(bytes32 hash, bytes memory signature) internal pure returns (address, RecoverError) {\\n        if (signature.length == 65) {\\n            bytes32 r;\\n            bytes32 s;\\n            uint8 v;\\n            // ecrecover takes the signature parameters, and the only way to get them\\n            // currently is to use assembly.\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                r := mload(add(signature, 0x20))\\n                s := mload(add(signature, 0x40))\\n                v := byte(0, mload(add(signature, 0x60)))\\n            }\\n            return tryRecover(hash, v, r, s);\\n        } else {\\n            return (address(0), RecoverError.InvalidSignatureLength);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the address that signed a hashed message (`hash`) with\\n     * `signature`. This address can then be used for verification purposes.\\n     *\\n     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\\n     * this function rejects them by requiring the `s` value to be in the lower\\n     * half order, and the `v` value to be either 27 or 28.\\n     *\\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\\n     * verification to be secure: it is possible to craft signatures that\\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\\n     * this is by receiving a hash of the original message (which may otherwise\\n     * be too long), and then calling {toEthSignedMessageHash} on it.\\n     */\\n    function recover(bytes32 hash, bytes memory signature) internal pure returns (address) {\\n        (address recovered, RecoverError error) = tryRecover(hash, signature);\\n        _throwError(error);\\n        return recovered;\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-tryRecover} that receives the `r` and `vs` short-signature fields separately.\\n     *\\n     * See https://eips.ethereum.org/EIPS/eip-2098[EIP-2098 short signatures]\\n     *\\n     * _Available since v4.3._\\n     */\\n    function tryRecover(bytes32 hash, bytes32 r, bytes32 vs) internal pure returns (address, RecoverError) {\\n        bytes32 s = vs & bytes32(0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff);\\n        uint8 v = uint8((uint256(vs) >> 255) + 27);\\n        return tryRecover(hash, v, r, s);\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-recover} that receives the `r and `vs` short-signature fields separately.\\n     *\\n     * _Available since v4.2._\\n     */\\n    function recover(bytes32 hash, bytes32 r, bytes32 vs) internal pure returns (address) {\\n        (address recovered, RecoverError error) = tryRecover(hash, r, vs);\\n        _throwError(error);\\n        return recovered;\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-tryRecover} that receives the `v`,\\n     * `r` and `s` signature fields separately.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function tryRecover(bytes32 hash, uint8 v, bytes32 r, bytes32 s) internal pure returns (address, RecoverError) {\\n        // EIP-2 still allows signature malleability for ecrecover(). Remove this possibility and make the signature\\n        // unique. Appendix F in the Ethereum Yellow paper (https://ethereum.github.io/yellowpaper/paper.pdf), defines\\n        // the valid range for s in (301): 0 < s < secp256k1n \\u00f7 2 + 1, and for v in (302): v \\u2208 {27, 28}. Most\\n        // signatures from current libraries generate a unique signature with an s-value in the lower half order.\\n        //\\n        // If your library generates malleable signatures, such as s-values in the upper range, calculate a new s-value\\n        // with 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEBAAEDCE6AF48A03BBFD25E8CD0364141 - s1 and flip v from 27 to 28 or\\n        // vice versa. If your library also generates signatures with 0/1 for v instead 27/28, add 27 to v to accept\\n        // these malleable signatures as well.\\n        if (uint256(s) > 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF5D576E7357A4501DDFE92F46681B20A0) {\\n            return (address(0), RecoverError.InvalidSignatureS);\\n        }\\n\\n        // If the signature is valid (and not malleable), return the signer address\\n        address signer = ecrecover(hash, v, r, s);\\n        if (signer == address(0)) {\\n            return (address(0), RecoverError.InvalidSignature);\\n        }\\n\\n        return (signer, RecoverError.NoError);\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-recover} that receives the `v`,\\n     * `r` and `s` signature fields separately.\\n     */\\n    function recover(bytes32 hash, uint8 v, bytes32 r, bytes32 s) internal pure returns (address) {\\n        (address recovered, RecoverError error) = tryRecover(hash, v, r, s);\\n        _throwError(error);\\n        return recovered;\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Message, created from a `hash`. This\\n     * produces hash corresponding to the one signed with the\\n     * https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`]\\n     * JSON-RPC method as part of EIP-191.\\n     *\\n     * See {recover}.\\n     */\\n    function toEthSignedMessageHash(bytes32 hash) internal pure returns (bytes32 message) {\\n        // 32 is the length in bytes of hash,\\n        // enforced by the type signature above\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            mstore(0x00, \\\"\\\\x19Ethereum Signed Message:\\\\n32\\\")\\n            mstore(0x1c, hash)\\n            message := keccak256(0x00, 0x3c)\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Message, created from `s`. This\\n     * produces hash corresponding to the one signed with the\\n     * https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`]\\n     * JSON-RPC method as part of EIP-191.\\n     *\\n     * See {recover}.\\n     */\\n    function toEthSignedMessageHash(bytes memory s) internal pure returns (bytes32) {\\n        return keccak256(abi.encodePacked(\\\"\\\\x19Ethereum Signed Message:\\\\n\\\", Strings.toString(s.length), s));\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Typed Data, created from a\\n     * `domainSeparator` and a `structHash`. This produces hash corresponding\\n     * to the one signed with the\\n     * https://eips.ethereum.org/EIPS/eip-712[`eth_signTypedData`]\\n     * JSON-RPC method as part of EIP-712.\\n     *\\n     * See {recover}.\\n     */\\n    function toTypedDataHash(bytes32 domainSeparator, bytes32 structHash) internal pure returns (bytes32 data) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            let ptr := mload(0x40)\\n            mstore(ptr, \\\"\\\\x19\\\\x01\\\")\\n            mstore(add(ptr, 0x02), domainSeparator)\\n            mstore(add(ptr, 0x22), structHash)\\n            data := keccak256(ptr, 0x42)\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Data with intended validator, created from a\\n     * `validator` and `data` according to the version 0 of EIP-191.\\n     *\\n     * See {recover}.\\n     */\\n    function toDataWithIntendedValidatorHash(address validator, bytes memory data) internal pure returns (bytes32) {\\n        return keccak256(abi.encodePacked(\\\"\\\\x19\\\\x00\\\", validator, data));\\n    }\\n}\\n\",\"keccak256\":\"0x809bc3edb4bcbef8263fa616c1b60ee0004b50a8a1bfa164d8f57fd31f520c58\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/Math.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/math/Math.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary Math {\\n    enum Rounding {\\n        Down, // Toward negative infinity\\n        Up, // Toward infinity\\n        Zero // Toward zero\\n    }\\n\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow.\\n        return (a & b) + (a ^ b) / 2;\\n    }\\n\\n    /**\\n     * @dev Returns the ceiling of the division of two numbers.\\n     *\\n     * This differs from standard division with `/` in that it rounds up instead\\n     * of rounding down.\\n     */\\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b - 1) / b can overflow on addition, so we distribute.\\n        return a == 0 ? 0 : (a - 1) / b + 1;\\n    }\\n\\n    /**\\n     * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\\n     * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv)\\n     * with further edits by Uniswap Labs also under MIT license.\\n     */\\n    function mulDiv(uint256 x, uint256 y, uint256 denominator) internal pure returns (uint256 result) {\\n        unchecked {\\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\\n            // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\\n            // variables such that product = prod1 * 2^256 + prod0.\\n            uint256 prod0; // Least significant 256 bits of the product\\n            uint256 prod1; // Most significant 256 bits of the product\\n            assembly {\\n                let mm := mulmod(x, y, not(0))\\n                prod0 := mul(x, y)\\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\\n            }\\n\\n            // Handle non-overflow cases, 256 by 256 division.\\n            if (prod1 == 0) {\\n                // Solidity will revert if denominator == 0, unlike the div opcode on its own.\\n                // The surrounding unchecked block does not change this fact.\\n                // See https://docs.soliditylang.org/en/latest/control-structures.html#checked-or-unchecked-arithmetic.\\n                return prod0 / denominator;\\n            }\\n\\n            // Make sure the result is less than 2^256. Also prevents denominator == 0.\\n            require(denominator > prod1, \\\"Math: mulDiv overflow\\\");\\n\\n            ///////////////////////////////////////////////\\n            // 512 by 256 division.\\n            ///////////////////////////////////////////////\\n\\n            // Make division exact by subtracting the remainder from [prod1 prod0].\\n            uint256 remainder;\\n            assembly {\\n                // Compute remainder using mulmod.\\n                remainder := mulmod(x, y, denominator)\\n\\n                // Subtract 256 bit number from 512 bit number.\\n                prod1 := sub(prod1, gt(remainder, prod0))\\n                prod0 := sub(prod0, remainder)\\n            }\\n\\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator. Always >= 1.\\n            // See https://cs.stackexchange.com/q/138556/92363.\\n\\n            // Does not overflow because the denominator cannot be zero at this stage in the function.\\n            uint256 twos = denominator & (~denominator + 1);\\n            assembly {\\n                // Divide denominator by twos.\\n                denominator := div(denominator, twos)\\n\\n                // Divide [prod1 prod0] by twos.\\n                prod0 := div(prod0, twos)\\n\\n                // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.\\n                twos := add(div(sub(0, twos), twos), 1)\\n            }\\n\\n            // Shift in bits from prod1 into prod0.\\n            prod0 |= prod1 * twos;\\n\\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\\n            // four bits. That is, denominator * inv = 1 mod 2^4.\\n            uint256 inverse = (3 * denominator) ^ 2;\\n\\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also works\\n            // in modular arithmetic, doubling the correct bits in each step.\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\\n\\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\\n            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\\n            // is no longer required.\\n            result = prod0 * inverse;\\n            return result;\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.\\n     */\\n    function mulDiv(uint256 x, uint256 y, uint256 denominator, Rounding rounding) internal pure returns (uint256) {\\n        uint256 result = mulDiv(x, y, denominator);\\n        if (rounding == Rounding.Up && mulmod(x, y, denominator) > 0) {\\n            result += 1;\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded down.\\n     *\\n     * Inspired by Henry S. Warren, Jr.'s \\\"Hacker's Delight\\\" (Chapter 11).\\n     */\\n    function sqrt(uint256 a) internal pure returns (uint256) {\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.\\n        //\\n        // We know that the \\\"msb\\\" (most significant bit) of our target number `a` is a power of 2 such that we have\\n        // `msb(a) <= a < 2*msb(a)`. This value can be written `msb(a)=2**k` with `k=log2(a)`.\\n        //\\n        // This can be rewritten `2**log2(a) <= a < 2**(log2(a) + 1)`\\n        // \\u2192 `sqrt(2**k) <= sqrt(a) < sqrt(2**(k+1))`\\n        // \\u2192 `2**(k/2) <= sqrt(a) < 2**((k+1)/2) <= 2**(k/2 + 1)`\\n        //\\n        // Consequently, `2**(log2(a) / 2)` is a good first approximation of `sqrt(a)` with at least 1 correct bit.\\n        uint256 result = 1 << (log2(a) >> 1);\\n\\n        // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,\\n        // since it is the square root of a uint256. Newton's method converges quadratically (precision doubles at\\n        // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision\\n        // into the expected uint128 result.\\n        unchecked {\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            return min(result, a / result);\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates sqrt(a), following the selected rounding direction.\\n     */\\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = sqrt(a);\\n            return result + (rounding == Rounding.Up && result * result < a ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 128;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 64;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 32;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 16;\\n            }\\n            if (value >> 8 > 0) {\\n                value >>= 8;\\n                result += 8;\\n            }\\n            if (value >> 4 > 0) {\\n                value >>= 4;\\n                result += 4;\\n            }\\n            if (value >> 2 > 0) {\\n                value >>= 2;\\n                result += 2;\\n            }\\n            if (value >> 1 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log2(value);\\n            return result + (rounding == Rounding.Up && 1 << result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >= 10 ** 64) {\\n                value /= 10 ** 64;\\n                result += 64;\\n            }\\n            if (value >= 10 ** 32) {\\n                value /= 10 ** 32;\\n                result += 32;\\n            }\\n            if (value >= 10 ** 16) {\\n                value /= 10 ** 16;\\n                result += 16;\\n            }\\n            if (value >= 10 ** 8) {\\n                value /= 10 ** 8;\\n                result += 8;\\n            }\\n            if (value >= 10 ** 4) {\\n                value /= 10 ** 4;\\n                result += 4;\\n            }\\n            if (value >= 10 ** 2) {\\n                value /= 10 ** 2;\\n                result += 2;\\n            }\\n            if (value >= 10 ** 1) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log10(value);\\n            return result + (rounding == Rounding.Up && 10 ** result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     *\\n     * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.\\n     */\\n    function log256(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 16;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 8;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 4;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 2;\\n            }\\n            if (value >> 8 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log256(value);\\n            return result + (rounding == Rounding.Up && 1 << (result << 3) < value ? 1 : 0);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xe4455ac1eb7fc497bb7402579e7b4d64d928b846fce7d2b6fde06d366f21c2b3\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/SignedMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/math/SignedMath.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard signed math utilities missing in the Solidity language.\\n */\\nlibrary SignedMath {\\n    /**\\n     * @dev Returns the largest of two signed numbers.\\n     */\\n    function max(int256 a, int256 b) internal pure returns (int256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two signed numbers.\\n     */\\n    function min(int256 a, int256 b) internal pure returns (int256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two signed numbers without overflow.\\n     * The result is rounded towards zero.\\n     */\\n    function average(int256 a, int256 b) internal pure returns (int256) {\\n        // Formula from the book \\\"Hacker's Delight\\\"\\n        int256 x = (a & b) + ((a ^ b) >> 1);\\n        return x + (int256(uint256(x) >> 255) & (a ^ b));\\n    }\\n\\n    /**\\n     * @dev Returns the absolute unsigned value of a signed value.\\n     */\\n    function abs(int256 n) internal pure returns (uint256) {\\n        unchecked {\\n            // must be unchecked in order to support `n = type(int256).min`\\n            return uint256(n >= 0 ? n : -n);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xf92515413956f529d95977adc9b0567d583c6203fc31ab1c23824c35187e3ddc\",\"license\":\"MIT\"},\"contracts/accounts/guardian/EmailGuardian.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.19;\\n\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/cryptography/ECDSA.sol\\\";\\n\\nimport \\\"../../interfaces/IDkimVerifier.sol\\\";\\n\\ncontract EmailGuardian is Ownable {\\n    event SignerChanged(address indexed signer);\\n    event EmailBinded(address indexed account, bytes32 email);\\n    event EmailUnbinded(address indexed account, bytes32 email);\\n\\n    IDkimVerifier private immutable _dkimVerifier;\\n    address public verifyingSigner;\\n    mapping(address => bytes32) public emails;\\n    mapping(address => uint256) public nonces;\\n    mapping(bytes32 => bool) public nullifierHashes;\\n\\n    constructor(IDkimVerifier dkimVerifier, address signer) {\\n        _dkimVerifier = dkimVerifier;\\n        verifyingSigner = signer;\\n        emit SignerChanged(signer);\\n    }\\n\\n    function getHash(address account, bytes32 email) public view returns (bytes32) {\\n        return keccak256(abi.encode(block.chainid, account, nonces[account], email));\\n    }\\n\\n    function bind(bytes32 email, bytes calldata signature) external {\\n        bytes32 hash = ECDSA.toEthSignedMessageHash(getHash(msg.sender, email));\\n        require(verifyingSigner == ECDSA.recover(hash, signature), \\\"error signature\\\");\\n\\n        nonces[msg.sender]++;\\n        emails[msg.sender] = email;\\n        emit EmailBinded(msg.sender, email);\\n    }\\n\\n    function unbind() external returns (bytes32 email) {\\n        email = emails[msg.sender];\\n        require(email != 0x0, \\\"email not bind yet\\\");\\n        delete emails[msg.sender];\\n        emit EmailUnbinded(msg.sender, email);\\n    }\\n\\n    function verify(\\n        bytes32 server,\\n        address account,\\n        bytes calldata data,\\n        bytes calldata signature,\\n        bytes calldata pubkey\\n    ) external returns (bool) {\\n        bytes32 hash = keccak256(data);\\n        require(!nullifierHashes[hash], \\\"used email data\\\");\\n        bytes memory from = _dkimVerifier.from(data);\\n        require(emails[msg.sender] == keccak256(from), \\\"error email owner\\\");\\n        require(_dkimVerifier.verify(server, data, signature), \\\"error dkim signature\\\");\\n        bytes memory subject = _dkimVerifier.subject(data);\\n        require(\\n            keccak256(subject) == keccak256(subjectHex(\\\"01\\\", account, pubkey)),\\n            \\\"error email type or pubkey\\\"\\n        );\\n        nullifierHashes[hash] = true;\\n\\n        return true;\\n    }\\n\\n    function changeSigner(address signer) external onlyOwner {\\n        verifyingSigner = signer;\\n        emit SignerChanged(signer);\\n    }\\n\\n    // format: type + chainid + account_address + pubkey\\n    function subjectHex(\\n        string memory typ,\\n        address account,\\n        bytes memory pubkey\\n    ) public view returns (bytes memory) {\\n        bytes memory converted = new bytes(pubkey.length * 2);\\n        bytes memory _base = \\\"0123456789abcdef\\\";\\n\\n        for (uint256 i = 0; i < pubkey.length; i++) {\\n            converted[i * 2] = _base[uint8(pubkey[i]) / _base.length];\\n            converted[i * 2 + 1] = _base[uint8(pubkey[i]) % _base.length];\\n        }\\n\\n        return\\n            abi.encodePacked(\\n                typ,\\n                Strings.toString(block.chainid),\\n                Strings.toHexString(account),\\n                converted\\n            );\\n    }\\n}\\n\",\"keccak256\":\"0x852ebbf48cb67b89e27963a9b974617c87cf2ebd7e158c802ac761e8ea02289f\",\"license\":\"MIT\"},\"contracts/interfaces/IDkimVerifier.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.19;\\n\\ninterface IDkimVerifier {\\n    function from(bytes memory data) external view returns (bytes memory);\\n\\n    function subject(bytes memory data) external view returns (bytes memory);\\n\\n    function hash(bytes memory data) external view returns (bytes32);\\n\\n    function verify(\\n        bytes32 server,\\n        bytes calldata data,\\n        bytes calldata signature\\n    ) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x6a7349cd6f1317d6061f42565744d524eb3c2ee3bb44396fdd9f35050b5b0c0c\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60a06040523480156200001157600080fd5b5060405162001e6338038062001e638339810160408190526200003491620000fd565b6200003f3362000094565b6001600160a01b03828116608052600180546001600160a01b03191691831691821790556040517f5719a5656c5cfdaafa148ecf366fd3b0a7fae06449ce2a46225977fb7417e29d90600090a250506200013c565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b6001600160a01b0381168114620000fa57600080fd5b50565b600080604083850312156200011157600080fd5b82516200011e81620000e4565b60208401519092506200013181620000e4565b809150509250929050565b608051611cfd62000166600039600081816108b701528181610a140152610b380152611cfd6000f3fe608060405234801561001057600080fd5b50600436106100df5760003560e01c80637ecebe001161008c578063b6b2574211610066578063b6b2574214610210578063ba075e0c14610218578063cb2da07c1461022b578063f2fde38b1461024b57600080fd5b80637ecebe00146101bf5780638da5cb5b146101df578063aad2b723146101fd57600080fd5b806323d9ac9b116100bd57806323d9ac9b1461015d578063333b6fb3146101a2578063715018a6146101b757600080fd5b8063060f919b146100e457806317cc915c1461010a5780631fe8c6b61461013d575b600080fd5b6100f76100f23660046115f8565b61025e565b6040519081526020015b60405180910390f35b61012d610118366004611622565b60046020526000908152604090205460ff1681565b6040519015158152602001610101565b61015061014b36600461173d565b6102c1565b6040516101019190611800565b60015461017d9073ffffffffffffffffffffffffffffffffffffffff1681565b60405173ffffffffffffffffffffffffffffffffffffffff9091168152602001610101565b6101b56101b0366004611893565b61050a565b005b6101b5610689565b6100f76101cd3660046118df565b60036020526000908152604090205481565b60005473ffffffffffffffffffffffffffffffffffffffff1661017d565b6101b561020b3660046118df565b61069d565b6100f7610714565b61012d6102263660046118fa565b6107dd565b6100f76102393660046118df565b60026020526000908152604090205481565b6101b56102593660046118df565b610d0a565b73ffffffffffffffffffffffffffffffffffffffff8216600081815260036020908152604091829020548251468184015280840194909452606084015260808084018590528251808503909101815260a090930190915281519101205b92915050565b60606000825160026102d391906119dd565b67ffffffffffffffff8111156102eb576102eb61163b565b6040519080825280601f01601f191660200182016040528015610315576020820181803683370190505b5060408051808201909152601081527f3031323334353637383961626364656600000000000000000000000000000000602082015290915060005b84518110156104c85781825186838151811061036e5761036e6119f4565b0160200151610380919060f81c611a52565b81518110610390576103906119f4565b01602001517fff0000000000000000000000000000000000000000000000000000000000000016836103c38360026119dd565b815181106103d3576103d36119f4565b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a905350818251868381518110610417576104176119f4565b0160200151610429919060f81c611a66565b81518110610439576104396119f4565b01602001517fff00000000000000000000000000000000000000000000000000000000000000168361046c8360026119dd565b610477906001611a7a565b81518110610487576104876119f4565b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a905350806104c081611a8d565b915050610350565b50856104d346610dc1565b6104dc87610e7f565b846040516020016104f09493929190611ac5565b604051602081830303815290604052925050509392505050565b600061054c610519338661025e565b7f19457468657265756d205369676e6564204d6573736167653a0a3332000000006000908152601c91909152603c902090565b905061058e8184848080601f016020809104026020016040519081016040528093929190818152602001838380828437600092019190915250610ea292505050565b60015473ffffffffffffffffffffffffffffffffffffffff908116911614610617576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600f60248201527f6572726f72207369676e6174757265000000000000000000000000000000000060448201526064015b60405180910390fd5b33600090815260036020526040812080549161063283611a8d565b90915550503360008181526002602052604090819020869055517fcbe6f129c479e90eae19ad4df47cdf0d8edcfe3d9caf30b5e5943efa3004b5159061067b9087815260200190565b60405180910390a250505050565b610691610ec6565b61069b6000610f47565b565b6106a5610ec6565b600180547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff83169081179091556040517f5719a5656c5cfdaafa148ecf366fd3b0a7fae06449ce2a46225977fb7417e29d90600090a250565b336000908152600260205260408120549081900361078e576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601260248201527f656d61696c206e6f742062696e64207965740000000000000000000000000000604482015260640161060e565b3360008181526002602052604080822091909155517f3e9a4081cf69725b7f0c26855e0b79a6c96a5bb433f3ab6db0cf03aff56aa264906107d29084815260200190565b60405180910390a290565b60008087876040516107f0929190611b1c565b604080519182900390912060008181526004602052919091205490915060ff1615610877576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600f60248201527f7573656420656d61696c20646174610000000000000000000000000000000000604482015260640161060e565b6040517f391c87c800000000000000000000000000000000000000000000000000000000815260009073ffffffffffffffffffffffffffffffffffffffff7f0000000000000000000000000000000000000000000000000000000000000000169063391c87c8906108ee908c908c90600401611b75565b600060405180830381865afa15801561090b573d6000803e3d6000fd5b505050506040513d6000823e601f3d9081017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe01682016040526109519190810190611b91565b80516020808301919091203360009081526002909252604090912054919250146109d7576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601160248201527f6572726f7220656d61696c206f776e6572000000000000000000000000000000604482015260640161060e565b6040517f5bf48e3a00000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff7f00000000000000000000000000000000000000000000000000000000000000001690635bf48e3a90610a51908e908d908d908d908d90600401611c08565b602060405180830381865afa158015610a6e573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610a929190611c41565b610af8576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601460248201527f6572726f7220646b696d207369676e6174757265000000000000000000000000604482015260640161060e565b6040517fa3364fd900000000000000000000000000000000000000000000000000000000815260009073ffffffffffffffffffffffffffffffffffffffff7f0000000000000000000000000000000000000000000000000000000000000000169063a3364fd990610b6f908d908d90600401611b75565b600060405180830381865afa158015610b8c573d6000803e3d6000fd5b505050506040513d6000823e601f3d9081017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0168201604052610bd29190810190611b91565b9050610c4a6040518060400160405280600281526020017f30310000000000000000000000000000000000000000000000000000000000008152508c88888080601f0160208091040260200160405190810160405280939291908181526020018383808284376000920191909152506102c192505050565b80519060200120818051906020012014610cc0576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601a60248201527f6572726f7220656d61696c2074797065206f72207075626b6579000000000000604482015260640161060e565b5050600090815260046020526040902080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00166001908117909155905098975050505050505050565b610d12610ec6565b73ffffffffffffffffffffffffffffffffffffffff8116610db5576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201527f6464726573730000000000000000000000000000000000000000000000000000606482015260840161060e565b610dbe81610f47565b50565b60606000610dce83610fbc565b600101905060008167ffffffffffffffff811115610dee57610dee61163b565b6040519080825280601f01601f191660200182016040528015610e18576020820181803683370190505b5090508181016020015b7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff017f3031323334353637383961626364656600000000000000000000000000000000600a86061a8153600a8504945084610e2257509392505050565b60606102bb73ffffffffffffffffffffffffffffffffffffffff8316601461109e565b6000806000610eb185856112e8565b91509150610ebe8161132d565b509392505050565b60005473ffffffffffffffffffffffffffffffffffffffff16331461069b576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604482015260640161060e565b6000805473ffffffffffffffffffffffffffffffffffffffff8381167fffffffffffffffffffffffff0000000000000000000000000000000000000000831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b6000807a184f03e93ff9f4daa797ed6e38ed64bf6a1f0100000000000000008310611005577a184f03e93ff9f4daa797ed6e38ed64bf6a1f010000000000000000830492506040015b6d04ee2d6d415b85acef81000000008310611031576d04ee2d6d415b85acef8100000000830492506020015b662386f26fc10000831061104f57662386f26fc10000830492506010015b6305f5e1008310611067576305f5e100830492506008015b612710831061107b57612710830492506004015b6064831061108d576064830492506002015b600a83106102bb5760010192915050565b606060006110ad8360026119dd565b6110b8906002611a7a565b67ffffffffffffffff8111156110d0576110d061163b565b6040519080825280601f01601f1916602001820160405280156110fa576020820181803683370190505b5090507f300000000000000000000000000000000000000000000000000000000000000081600081518110611131576111316119f4565b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a9053507f780000000000000000000000000000000000000000000000000000000000000081600181518110611194576111946119f4565b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a90535060006111d08460026119dd565b6111db906001611a7a565b90505b6001811115611278577f303132333435363738396162636465660000000000000000000000000000000085600f166010811061121c5761121c6119f4565b1a60f81b828281518110611232576112326119f4565b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a90535060049490941c9361127181611c63565b90506111de565b5083156112e1576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820181905260248201527f537472696e67733a20686578206c656e67746820696e73756666696369656e74604482015260640161060e565b9392505050565b600080825160410361131e5760208301516040840151606085015160001a611312878285856114e0565b94509450505050611326565b506000905060025b9250929050565b600081600481111561134157611341611c98565b036113495750565b600181600481111561135d5761135d611c98565b036113c4576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601860248201527f45434453413a20696e76616c6964207369676e61747572650000000000000000604482015260640161060e565b60028160048111156113d8576113d8611c98565b0361143f576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601f60248201527f45434453413a20696e76616c6964207369676e6174757265206c656e67746800604482015260640161060e565b600381600481111561145357611453611c98565b03610dbe576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602260248201527f45434453413a20696e76616c6964207369676e6174757265202773272076616c60448201527f7565000000000000000000000000000000000000000000000000000000000000606482015260840161060e565b6000807f7fffffffffffffffffffffffffffffff5d576e7357a4501ddfe92f46681b20a083111561151757506000905060036115c6565b6040805160008082526020820180845289905260ff881692820192909252606081018690526080810185905260019060a0016020604051602081039080840390855afa15801561156b573d6000803e3d6000fd5b50506040517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0015191505073ffffffffffffffffffffffffffffffffffffffff81166115bf576000600192509250506115c6565b9150600090505b94509492505050565b803573ffffffffffffffffffffffffffffffffffffffff811681146115f357600080fd5b919050565b6000806040838503121561160b57600080fd5b611614836115cf565b946020939093013593505050565b60006020828403121561163457600080fd5b5035919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b604051601f82017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe016810167ffffffffffffffff811182821017156116b1576116b161163b565b604052919050565b600067ffffffffffffffff8211156116d3576116d361163b565b50601f017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe01660200190565b600061171261170d846116b9565b61166a565b905082815283838301111561172657600080fd5b828260208301376000602084830101529392505050565b60008060006060848603121561175257600080fd5b833567ffffffffffffffff8082111561176a57600080fd5b818601915086601f83011261177e57600080fd5b61178d878335602085016116ff565b945061179b602087016115cf565b935060408601359150808211156117b157600080fd5b508401601f810186136117c357600080fd5b6117d2868235602084016116ff565b9150509250925092565b60005b838110156117f75781810151838201526020016117df565b50506000910152565b602081526000825180602084015261181f8160408501602087016117dc565b601f017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0169190910160400192915050565b60008083601f84011261186357600080fd5b50813567ffffffffffffffff81111561187b57600080fd5b60208301915083602082850101111561132657600080fd5b6000806000604084860312156118a857600080fd5b83359250602084013567ffffffffffffffff8111156118c657600080fd5b6118d286828701611851565b9497909650939450505050565b6000602082840312156118f157600080fd5b6112e1826115cf565b60008060008060008060008060a0898b03121561191657600080fd5b8835975061192660208a016115cf565b9650604089013567ffffffffffffffff8082111561194357600080fd5b61194f8c838d01611851565b909850965060608b013591508082111561196857600080fd5b6119748c838d01611851565b909650945060808b013591508082111561198d57600080fd5b5061199a8b828c01611851565b999c989b5096995094979396929594505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b80820281158282048414176102bb576102bb6119ae565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b600082611a6157611a61611a23565b500490565b600082611a7557611a75611a23565b500690565b808201808211156102bb576102bb6119ae565b60007fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8203611abe57611abe6119ae565b5060010190565b60008551611ad7818460208a016117dc565b855190830190611aeb818360208a016117dc565b8551910190611afe8183602089016117dc565b8451910190611b118183602088016117dc565b019695505050505050565b8183823760009101908152919050565b8183528181602085013750600060208284010152600060207fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0601f840116840101905092915050565b602081526000611b89602083018486611b2c565b949350505050565b600060208284031215611ba357600080fd5b815167ffffffffffffffff811115611bba57600080fd5b8201601f81018413611bcb57600080fd5b8051611bd961170d826116b9565b818152856020838501011115611bee57600080fd5b611bff8260208301602086016117dc565b95945050505050565b858152606060208201526000611c22606083018688611b2c565b8281036040840152611c35818587611b2c565b98975050505050505050565b600060208284031215611c5357600080fd5b815180151581146112e157600080fd5b600081611c7257611c726119ae565b507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0190565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fdfea2646970667358221220fd29e7f6f0e2b201290cb74c58f83f1a3e043a52458892afe488a734baddd5e164736f6c63430008130033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106100df5760003560e01c80637ecebe001161008c578063b6b2574211610066578063b6b2574214610210578063ba075e0c14610218578063cb2da07c1461022b578063f2fde38b1461024b57600080fd5b80637ecebe00146101bf5780638da5cb5b146101df578063aad2b723146101fd57600080fd5b806323d9ac9b116100bd57806323d9ac9b1461015d578063333b6fb3146101a2578063715018a6146101b757600080fd5b8063060f919b146100e457806317cc915c1461010a5780631fe8c6b61461013d575b600080fd5b6100f76100f23660046115f8565b61025e565b6040519081526020015b60405180910390f35b61012d610118366004611622565b60046020526000908152604090205460ff1681565b6040519015158152602001610101565b61015061014b36600461173d565b6102c1565b6040516101019190611800565b60015461017d9073ffffffffffffffffffffffffffffffffffffffff1681565b60405173ffffffffffffffffffffffffffffffffffffffff9091168152602001610101565b6101b56101b0366004611893565b61050a565b005b6101b5610689565b6100f76101cd3660046118df565b60036020526000908152604090205481565b60005473ffffffffffffffffffffffffffffffffffffffff1661017d565b6101b561020b3660046118df565b61069d565b6100f7610714565b61012d6102263660046118fa565b6107dd565b6100f76102393660046118df565b60026020526000908152604090205481565b6101b56102593660046118df565b610d0a565b73ffffffffffffffffffffffffffffffffffffffff8216600081815260036020908152604091829020548251468184015280840194909452606084015260808084018590528251808503909101815260a090930190915281519101205b92915050565b60606000825160026102d391906119dd565b67ffffffffffffffff8111156102eb576102eb61163b565b6040519080825280601f01601f191660200182016040528015610315576020820181803683370190505b5060408051808201909152601081527f3031323334353637383961626364656600000000000000000000000000000000602082015290915060005b84518110156104c85781825186838151811061036e5761036e6119f4565b0160200151610380919060f81c611a52565b81518110610390576103906119f4565b01602001517fff0000000000000000000000000000000000000000000000000000000000000016836103c38360026119dd565b815181106103d3576103d36119f4565b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a905350818251868381518110610417576104176119f4565b0160200151610429919060f81c611a66565b81518110610439576104396119f4565b01602001517fff00000000000000000000000000000000000000000000000000000000000000168361046c8360026119dd565b610477906001611a7a565b81518110610487576104876119f4565b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a905350806104c081611a8d565b915050610350565b50856104d346610dc1565b6104dc87610e7f565b846040516020016104f09493929190611ac5565b604051602081830303815290604052925050509392505050565b600061054c610519338661025e565b7f19457468657265756d205369676e6564204d6573736167653a0a3332000000006000908152601c91909152603c902090565b905061058e8184848080601f016020809104026020016040519081016040528093929190818152602001838380828437600092019190915250610ea292505050565b60015473ffffffffffffffffffffffffffffffffffffffff908116911614610617576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600f60248201527f6572726f72207369676e6174757265000000000000000000000000000000000060448201526064015b60405180910390fd5b33600090815260036020526040812080549161063283611a8d565b90915550503360008181526002602052604090819020869055517fcbe6f129c479e90eae19ad4df47cdf0d8edcfe3d9caf30b5e5943efa3004b5159061067b9087815260200190565b60405180910390a250505050565b610691610ec6565b61069b6000610f47565b565b6106a5610ec6565b600180547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff83169081179091556040517f5719a5656c5cfdaafa148ecf366fd3b0a7fae06449ce2a46225977fb7417e29d90600090a250565b336000908152600260205260408120549081900361078e576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601260248201527f656d61696c206e6f742062696e64207965740000000000000000000000000000604482015260640161060e565b3360008181526002602052604080822091909155517f3e9a4081cf69725b7f0c26855e0b79a6c96a5bb433f3ab6db0cf03aff56aa264906107d29084815260200190565b60405180910390a290565b60008087876040516107f0929190611b1c565b604080519182900390912060008181526004602052919091205490915060ff1615610877576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600f60248201527f7573656420656d61696c20646174610000000000000000000000000000000000604482015260640161060e565b6040517f391c87c800000000000000000000000000000000000000000000000000000000815260009073ffffffffffffffffffffffffffffffffffffffff7f0000000000000000000000000000000000000000000000000000000000000000169063391c87c8906108ee908c908c90600401611b75565b600060405180830381865afa15801561090b573d6000803e3d6000fd5b505050506040513d6000823e601f3d9081017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe01682016040526109519190810190611b91565b80516020808301919091203360009081526002909252604090912054919250146109d7576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601160248201527f6572726f7220656d61696c206f776e6572000000000000000000000000000000604482015260640161060e565b6040517f5bf48e3a00000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff7f00000000000000000000000000000000000000000000000000000000000000001690635bf48e3a90610a51908e908d908d908d908d90600401611c08565b602060405180830381865afa158015610a6e573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610a929190611c41565b610af8576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601460248201527f6572726f7220646b696d207369676e6174757265000000000000000000000000604482015260640161060e565b6040517fa3364fd900000000000000000000000000000000000000000000000000000000815260009073ffffffffffffffffffffffffffffffffffffffff7f0000000000000000000000000000000000000000000000000000000000000000169063a3364fd990610b6f908d908d90600401611b75565b600060405180830381865afa158015610b8c573d6000803e3d6000fd5b505050506040513d6000823e601f3d9081017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0168201604052610bd29190810190611b91565b9050610c4a6040518060400160405280600281526020017f30310000000000000000000000000000000000000000000000000000000000008152508c88888080601f0160208091040260200160405190810160405280939291908181526020018383808284376000920191909152506102c192505050565b80519060200120818051906020012014610cc0576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601a60248201527f6572726f7220656d61696c2074797065206f72207075626b6579000000000000604482015260640161060e565b5050600090815260046020526040902080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00166001908117909155905098975050505050505050565b610d12610ec6565b73ffffffffffffffffffffffffffffffffffffffff8116610db5576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201527f6464726573730000000000000000000000000000000000000000000000000000606482015260840161060e565b610dbe81610f47565b50565b60606000610dce83610fbc565b600101905060008167ffffffffffffffff811115610dee57610dee61163b565b6040519080825280601f01601f191660200182016040528015610e18576020820181803683370190505b5090508181016020015b7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff017f3031323334353637383961626364656600000000000000000000000000000000600a86061a8153600a8504945084610e2257509392505050565b60606102bb73ffffffffffffffffffffffffffffffffffffffff8316601461109e565b6000806000610eb185856112e8565b91509150610ebe8161132d565b509392505050565b60005473ffffffffffffffffffffffffffffffffffffffff16331461069b576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604482015260640161060e565b6000805473ffffffffffffffffffffffffffffffffffffffff8381167fffffffffffffffffffffffff0000000000000000000000000000000000000000831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b6000807a184f03e93ff9f4daa797ed6e38ed64bf6a1f0100000000000000008310611005577a184f03e93ff9f4daa797ed6e38ed64bf6a1f010000000000000000830492506040015b6d04ee2d6d415b85acef81000000008310611031576d04ee2d6d415b85acef8100000000830492506020015b662386f26fc10000831061104f57662386f26fc10000830492506010015b6305f5e1008310611067576305f5e100830492506008015b612710831061107b57612710830492506004015b6064831061108d576064830492506002015b600a83106102bb5760010192915050565b606060006110ad8360026119dd565b6110b8906002611a7a565b67ffffffffffffffff8111156110d0576110d061163b565b6040519080825280601f01601f1916602001820160405280156110fa576020820181803683370190505b5090507f300000000000000000000000000000000000000000000000000000000000000081600081518110611131576111316119f4565b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a9053507f780000000000000000000000000000000000000000000000000000000000000081600181518110611194576111946119f4565b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a90535060006111d08460026119dd565b6111db906001611a7a565b90505b6001811115611278577f303132333435363738396162636465660000000000000000000000000000000085600f166010811061121c5761121c6119f4565b1a60f81b828281518110611232576112326119f4565b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a90535060049490941c9361127181611c63565b90506111de565b5083156112e1576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820181905260248201527f537472696e67733a20686578206c656e67746820696e73756666696369656e74604482015260640161060e565b9392505050565b600080825160410361131e5760208301516040840151606085015160001a611312878285856114e0565b94509450505050611326565b506000905060025b9250929050565b600081600481111561134157611341611c98565b036113495750565b600181600481111561135d5761135d611c98565b036113c4576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601860248201527f45434453413a20696e76616c6964207369676e61747572650000000000000000604482015260640161060e565b60028160048111156113d8576113d8611c98565b0361143f576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601f60248201527f45434453413a20696e76616c6964207369676e6174757265206c656e67746800604482015260640161060e565b600381600481111561145357611453611c98565b03610dbe576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602260248201527f45434453413a20696e76616c6964207369676e6174757265202773272076616c60448201527f7565000000000000000000000000000000000000000000000000000000000000606482015260840161060e565b6000807f7fffffffffffffffffffffffffffffff5d576e7357a4501ddfe92f46681b20a083111561151757506000905060036115c6565b6040805160008082526020820180845289905260ff881692820192909252606081018690526080810185905260019060a0016020604051602081039080840390855afa15801561156b573d6000803e3d6000fd5b50506040517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0015191505073ffffffffffffffffffffffffffffffffffffffff81166115bf576000600192509250506115c6565b9150600090505b94509492505050565b803573ffffffffffffffffffffffffffffffffffffffff811681146115f357600080fd5b919050565b6000806040838503121561160b57600080fd5b611614836115cf565b946020939093013593505050565b60006020828403121561163457600080fd5b5035919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b604051601f82017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe016810167ffffffffffffffff811182821017156116b1576116b161163b565b604052919050565b600067ffffffffffffffff8211156116d3576116d361163b565b50601f017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe01660200190565b600061171261170d846116b9565b61166a565b905082815283838301111561172657600080fd5b828260208301376000602084830101529392505050565b60008060006060848603121561175257600080fd5b833567ffffffffffffffff8082111561176a57600080fd5b818601915086601f83011261177e57600080fd5b61178d878335602085016116ff565b945061179b602087016115cf565b935060408601359150808211156117b157600080fd5b508401601f810186136117c357600080fd5b6117d2868235602084016116ff565b9150509250925092565b60005b838110156117f75781810151838201526020016117df565b50506000910152565b602081526000825180602084015261181f8160408501602087016117dc565b601f017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0169190910160400192915050565b60008083601f84011261186357600080fd5b50813567ffffffffffffffff81111561187b57600080fd5b60208301915083602082850101111561132657600080fd5b6000806000604084860312156118a857600080fd5b83359250602084013567ffffffffffffffff8111156118c657600080fd5b6118d286828701611851565b9497909650939450505050565b6000602082840312156118f157600080fd5b6112e1826115cf565b60008060008060008060008060a0898b03121561191657600080fd5b8835975061192660208a016115cf565b9650604089013567ffffffffffffffff8082111561194357600080fd5b61194f8c838d01611851565b909850965060608b013591508082111561196857600080fd5b6119748c838d01611851565b909650945060808b013591508082111561198d57600080fd5b5061199a8b828c01611851565b999c989b5096995094979396929594505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b80820281158282048414176102bb576102bb6119ae565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b600082611a6157611a61611a23565b500490565b600082611a7557611a75611a23565b500690565b808201808211156102bb576102bb6119ae565b60007fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8203611abe57611abe6119ae565b5060010190565b60008551611ad7818460208a016117dc565b855190830190611aeb818360208a016117dc565b8551910190611afe8183602089016117dc565b8451910190611b118183602088016117dc565b019695505050505050565b8183823760009101908152919050565b8183528181602085013750600060208284010152600060207fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0601f840116840101905092915050565b602081526000611b89602083018486611b2c565b949350505050565b600060208284031215611ba357600080fd5b815167ffffffffffffffff811115611bba57600080fd5b8201601f81018413611bcb57600080fd5b8051611bd961170d826116b9565b818152856020838501011115611bee57600080fd5b611bff8260208301602086016117dc565b95945050505050565b858152606060208201526000611c22606083018688611b2c565b8281036040840152611c35818587611b2c565b98975050505050505050565b600060208284031215611c5357600080fd5b815180151581146112e157600080fd5b600081611c7257611c726119ae565b507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0190565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fdfea2646970667358221220fd29e7f6f0e2b201290cb74c58f83f1a3e043a52458892afe488a734baddd5e164736f6c63430008130033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner."
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 1087,
        "contract": "contracts/accounts/guardian/EmailGuardian.sol:EmailGuardian",
        "label": "_owner",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 4139,
        "contract": "contracts/accounts/guardian/EmailGuardian.sol:EmailGuardian",
        "label": "verifyingSigner",
        "offset": 0,
        "slot": "1",
        "type": "t_address"
      },
      {
        "astId": 4143,
        "contract": "contracts/accounts/guardian/EmailGuardian.sol:EmailGuardian",
        "label": "emails",
        "offset": 0,
        "slot": "2",
        "type": "t_mapping(t_address,t_bytes32)"
      },
      {
        "astId": 4147,
        "contract": "contracts/accounts/guardian/EmailGuardian.sol:EmailGuardian",
        "label": "nonces",
        "offset": 0,
        "slot": "3",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 4151,
        "contract": "contracts/accounts/guardian/EmailGuardian.sol:EmailGuardian",
        "label": "nullifierHashes",
        "offset": 0,
        "slot": "4",
        "type": "t_mapping(t_bytes32,t_bool)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_mapping(t_address,t_bytes32)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bytes32)",
        "numberOfBytes": "32",
        "value": "t_bytes32"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_bytes32,t_bool)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}